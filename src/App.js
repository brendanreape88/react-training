import React, { Component } from 'react'
import Child from './Child'
import AppContext from './AppContext'
import PropsChildrenExample from './PropsChildrenExample'
import NoteList from './NoteList'
import NoteList2 from './NoteList2'

class App extends Component {
    constructor(props) {
        super(props)
        this.state = {
            App: {
                name: "App",
                text: "I'm the App component.",
                deepText: "This is being passed alllll the way down"
            },
            Child: {
                name: "Child",
                text: "I'm the child component."
            },
            GrandChild: {
                name: "GrandChild",
                text: "I'm the grandchild component."
            },
            GreatGrandChild: {
                name: "GreatGrandChild",
                text: "I'm the great-grandchild component."
            },
            GreatestGrandChild: {
                name: "GreatestGrandChild",
                text: "This text is being generated by context instead of prop-drilling."
            },
            TorF: true,
            Notes: [
                {
                    name: "note1",
                    id: 1,
                    content: "Hi."
                },
                {
                    name: "note2",
                    id: 2,
                    content: "Hi again."
                },
                {
                    name: "note3",
                    id: 3,
                    content: "Hi once more."
                }
            ]  
        }
        this.handleClick = this.handleClick.bind(this)
        this.handleNestedClick = this.handleNestedClick.bind(this)
        this.handleTruthiness = this.handleTruthiness.bind(this)
    }


    handleClick(event) {
        let newApp = {...this.state.App};
        newApp.deepText = "This text has changed!";
        this.setState({App: newApp});
    }

    handleNestedClick(event) {
        let oldApp = {...this.state.App};
        oldApp.deepText = "This is being passed alllll the way down"
        this.setState({App: oldApp})
    }

    handleTruthiness(event) {
        let TorF = this.state.TorF
        this.setState({TorF: !TorF})
    }

    handleClickDelete = (noteId) => {
        alert('Delete button was clicked')
        this.setState({
            Notes: this.state.Notes.filter(note => note.id !== noteId)
        })
    }

    render() {
        {/*const value = {...this.state}*/}
        const value = {
            App: this.state.App,
            Child: this.state.Child,
            GrandChild: this.state.GrandChild,
            GreatGrandChild: this.state.GreatGrandChild,
            GreatestGrandChild: this.state.GreatestGrandChild,
            TorF: this.state.TorF,
            Notes: this.state.Notes,
            handleClickDelete: this.handleClickDelete
        };
        return(
            <AppContext.Provider value={value}>
                <div>
                    <h1>{this.state.App.name}</h1>
                    <h3>{this.state.App.text}</h3>
                    <h5>{this.state.App.deepText}</h5>
                    <button onClick={this.handleClick}>change text</button>
                    <Child 
                        name={this.state.Child.name}
                        text={this.state.Child.text}
                        deepText={this.state.App.deepText}
                        handleNestedClick={this.handleNestedClick}
                        handleTruthiness={this.handleTruthiness}
                    />
                    <PropsChildrenExample>
                        <div>
                            <h3>Props.children example text!</h3>
                            <h3>More example text!</h3>
                            <h3>Even more example text!</h3>
                        </div>
                    </PropsChildrenExample>
                    <PropsChildrenExample>Wow, even more example text!</PropsChildrenExample>
                    <PropsChildrenExample>Enough with the example text.</PropsChildrenExample>
                    <NoteList 
                        noteData={this.state.Notes}
                        handleClickDelete={this.handleClickDelete}
                    />
                    <NoteList2 />
                </div>
            </AppContext.Provider>
        )
    }
}

export default App